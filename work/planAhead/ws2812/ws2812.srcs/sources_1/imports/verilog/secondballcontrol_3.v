/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module secondballcontrol_3 (
    input clk,
    input rst,
    output reg [7:0] ballpos,
    output reg [3:0] ballposx,
    output reg [3:0] ballposy,
    input [3:0] paddlepos,
    input [1:0] playing,
    output reg endgame
  );
  
  
  
  reg [7:0] ball;
  
  reg [3:0] ballx;
  
  reg [3:0] bally;
  
  reg [3:0] pleft;
  
  reg [3:0] pright;
  
  reg [15:0] pcenter;
  
  wire [1-1:0] M_myalu_z;
  wire [1-1:0] M_myalu_v;
  wire [1-1:0] M_myalu_n;
  wire [16-1:0] M_myalu_out;
  reg [16-1:0] M_myalu_a;
  reg [16-1:0] M_myalu_b;
  reg [6-1:0] M_myalu_alufn;
  alu16bit_17 myalu (
    .a(M_myalu_a),
    .b(M_myalu_b),
    .alufn(M_myalu_alufn),
    .z(M_myalu_z),
    .v(M_myalu_v),
    .n(M_myalu_n),
    .out(M_myalu_out)
  );
  
  reg [3:0] aluout;
  
  reg [2047:0] array;
  
  reg [22:0] M_counter_d, M_counter_q = 1'h0;
  reg [28:0] M_tempcounter_d, M_tempcounter_q = 1'h0;
  reg [7:0] M_pos_d, M_pos_q = 1'h0;
  reg [3:0] M_posx_d, M_posx_q = 1'h0;
  reg [3:0] M_posy_d, M_posy_q = 1'h0;
  reg M_end_d, M_end_q = 1'h0;
  localparam GAMESTART_state = 3'd0;
  localparam LEFTUP_state = 3'd1;
  localparam LEFTDOWN_state = 3'd2;
  localparam RIGHTUP_state = 3'd3;
  localparam RIGHTDOWN_state = 3'd4;
  
  reg [2:0] M_state_d, M_state_q = GAMESTART_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_posy_d = M_posy_q;
    M_counter_d = M_counter_q;
    M_posx_d = M_posx_q;
    M_end_d = M_end_q;
    M_pos_d = M_pos_q;
    M_tempcounter_d = M_tempcounter_q;
    
    M_myalu_a = M_posx_q;
    M_myalu_b = 16'h0000;
    M_myalu_alufn = 6'h00;
    ballx = M_myalu_out[0+3-:4];
    bally = M_posy_q;
    ball = M_pos_q;
    endgame = M_end_q;
    
    case (paddlepos)
      default: begin
        pleft = 4'h0;
        pcenter = 16'h0123;
        pright = 4'h4;
      end
      4'h0: begin
        pleft = 4'h0;
        pcenter = 16'h0123;
        pright = 4'h4;
      end
      4'h1: begin
        pleft = 4'h0;
        pcenter = 16'h1234;
        pright = 4'h5;
      end
      4'h2: begin
        pleft = 4'h1;
        pcenter = 16'h2345;
        pright = 4'h6;
      end
      4'h3: begin
        pleft = 4'h2;
        pcenter = 16'h3456;
        pright = 4'h7;
      end
      4'h4: begin
        pleft = 4'h3;
        pcenter = 16'h4567;
        pright = 4'h8;
      end
      4'h5: begin
        pleft = 4'h4;
        pcenter = 16'h5678;
        pright = 4'h9;
      end
      4'h6: begin
        pleft = 4'h5;
        pcenter = 16'h6789;
        pright = 4'ha;
      end
      4'h7: begin
        pleft = 4'h6;
        pcenter = 16'h789a;
        pright = 4'hb;
      end
      4'h8: begin
        pleft = 4'h7;
        pcenter = 16'h89ab;
        pright = 4'hc;
      end
      4'h9: begin
        pleft = 4'h8;
        pcenter = 16'h9abc;
        pright = 4'hd;
      end
      4'ha: begin
        pleft = 4'h9;
        pcenter = 16'habcd;
        pright = 4'he;
      end
      4'hb: begin
        pleft = 4'ha;
        pcenter = 16'hbcde;
        pright = 4'hf;
      end
      4'hc: begin
        pleft = 4'hb;
        pcenter = 16'hcdef;
        pright = 4'hf;
      end
      4'hd: begin
        pleft = 4'hc;
        pcenter = 16'hdeff;
        pright = 4'hf;
      end
      4'he: begin
        pleft = 4'hd;
        pcenter = 16'hefff;
        pright = 4'hf;
      end
      4'hf: begin
        pleft = 4'he;
        pcenter = 16'hffff;
        pright = 4'hf;
      end
    endcase
    array[0+127-:128] = 128'h0f0e0d0c0b0a09080706050403020100;
    array[128+127-:128] = 128'h101112131415161718191a1b1c1d1e1f;
    array[256+127-:128] = 128'h2f2e2d2c2b2a29282726252423222120;
    array[384+127-:128] = 128'h303132333435363738393a3b3c3d3e3f;
    array[512+127-:128] = 128'h4f4e4d4c4b4a49484746454443424140;
    array[640+127-:128] = 128'h505152535455565758595a5b5c5d5e5f;
    array[768+127-:128] = 128'h6f6e6d6c6b6a69686766656463626160;
    array[896+127-:128] = 128'h707172737475767778797a7b7c7d7e7f;
    array[1024+127-:128] = 128'h8f8e8d8c8b8a89888786858483828180;
    array[1152+127-:128] = 128'h909192939495969798999a9b9c9d9e9f;
    array[1280+127-:128] = 128'hafaeadacabaaa9a8a7a6a5a4a3a2a1a0;
    array[1408+127-:128] = 128'hb0b1b2b3b4b5b6b7b8b9babbbcbdbebf;
    array[1536+127-:128] = 128'hcfcecdcccbcac9c8c7c6c5c4c3c2c1c0;
    array[1664+127-:128] = 128'hd0d1d2d3d4d5d6d7d8d9dadbdcdddedf;
    array[1792+127-:128] = 128'hefeeedecebeae9e8e7e6e5e4e3e2e1e0;
    array[1920+127-:128] = 128'hf0f1f2f3f4f5f6f7f8f9fafbfcfdfeff;
    
    case (M_state_q)
      GAMESTART_state: begin
        M_tempcounter_d = M_tempcounter_q + 1'h1;
        ballx = 1'h1;
        bally = 1'h1;
        M_posx_d = ballx;
        M_posy_d = bally;
        ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
        M_pos_d = ball;
        M_end_d = 1'h0;
        endgame = M_end_q;
        if (M_tempcounter_q[28+0-:1] == 1'h1) begin
          M_tempcounter_d = 1'h0;
          if (playing == 2'h2) begin
            M_state_d = RIGHTUP_state;
          end else begin
            M_state_d = GAMESTART_state;
          end
        end
      end
      RIGHTUP_state: begin
        if (playing == 2'h0) begin
          M_state_d = GAMESTART_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        
        case (M_counter_q)
          23'h7ffff8: begin
            if (M_posx_q != 4'hf) begin
              M_myalu_a = M_posx_q;
              M_myalu_b = 16'h0001;
              M_myalu_alufn = 6'h00;
              ballx = M_myalu_out[0+3-:4];
              M_posx_d = ballx;
            end
          end
          23'h7ffff9: begin
            if (M_posy_q != 4'hf) begin
              M_myalu_a = M_posy_q;
              M_myalu_b = 16'h0001;
              M_myalu_alufn = 6'h00;
              bally = M_myalu_out[0+3-:4];
              M_posy_d = bally;
            end
          end
          23'h7ffffb: begin
            if (M_posy_q == 4'hf && M_posx_q == 4'hf) begin
              ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
              M_pos_d = ball;
              M_counter_d = 1'h0;
              M_state_d = LEFTDOWN_state;
            end else begin
              if (M_posy_q == 4'hf) begin
                ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                M_pos_d = ball;
                M_counter_d = 1'h0;
                M_state_d = RIGHTDOWN_state;
              end else begin
                if (M_posx_q == 4'hf) begin
                  ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                  M_pos_d = ball;
                  M_counter_d = 1'h0;
                  M_state_d = LEFTUP_state;
                end else begin
                  ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                  M_pos_d = ball;
                  M_counter_d = 1'h0;
                  M_state_d = RIGHTUP_state;
                end
              end
            end
          end
        endcase
      end
      LEFTUP_state: begin
        if (playing == 2'h0) begin
          M_state_d = GAMESTART_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        
        case (M_counter_q)
          23'h7ffff8: begin
            if (M_posx_q != 4'h0) begin
              M_myalu_a = M_posx_q;
              M_myalu_b = 16'h0001;
              M_myalu_alufn = 6'h01;
              ballx = M_myalu_out[0+3-:4];
              M_posx_d = ballx;
            end
          end
          23'h7ffff9: begin
            if (M_posy_q != 4'hf) begin
              M_myalu_a = M_posy_q;
              M_myalu_b = 16'h0001;
              M_myalu_alufn = 6'h00;
              bally = M_myalu_out[0+3-:4];
              M_posy_d = bally;
            end
          end
          23'h7ffffb: begin
            if (M_posx_q == 4'h0 && M_posy_q == 4'hf) begin
              ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
              M_pos_d = ball;
              M_counter_d = 1'h0;
              M_state_d = RIGHTDOWN_state;
            end else begin
              if (M_posy_q == 4'hf) begin
                ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                M_pos_d = ball;
                M_counter_d = 1'h0;
                M_state_d = LEFTDOWN_state;
              end else begin
                if (M_posx_q == 4'h0) begin
                  ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                  M_pos_d = ball;
                  M_counter_d = 1'h0;
                  M_state_d = RIGHTUP_state;
                end else begin
                  ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                  M_pos_d = ball;
                  M_counter_d = 1'h0;
                  M_state_d = LEFTUP_state;
                end
              end
            end
          end
        endcase
      end
      RIGHTDOWN_state: begin
        if (playing == 2'h0) begin
          M_state_d = GAMESTART_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        
        case (M_counter_q)
          1'h1: begin
            if (M_posy_q == 4'h1) begin
              M_myalu_a = M_posx_q;
              M_myalu_b = 16'h0000;
              M_myalu_alufn = 6'h00;
              aluout = M_myalu_out[0+3-:4];
              if (pleft == aluout) begin
                ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                M_pos_d = ball;
                M_counter_d = 1'h0;
                M_state_d = LEFTUP_state;
              end else begin
                if (pcenter[0+3-:4] == aluout || pcenter[4+3-:4] == aluout || pcenter[8+3-:4] == aluout || pcenter[12+3-:4] == aluout) begin
                  ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                  M_pos_d = ball;
                  M_counter_d = 1'h0;
                  M_state_d = RIGHTUP_state;
                end else begin
                  M_counter_d = 1'h0;
                  M_end_d = 1'h1;
                  M_state_d = GAMESTART_state;
                end
              end
            end
          end
          23'h7ffff9: begin
            if (M_posx_q != 4'hf) begin
              M_myalu_a = M_posx_q;
              M_myalu_b = 16'h0001;
              M_myalu_alufn = 6'h00;
              ballx = M_myalu_out[0+3-:4];
              M_posx_d = ballx;
            end
          end
          23'h7ffff8: begin
            if (M_posy_q != 4'h1) begin
              M_myalu_a = M_posy_q;
              M_myalu_b = 16'h0001;
              M_myalu_alufn = 6'h01;
              bally = M_myalu_out[0+3-:4];
              M_posy_d = bally;
            end
          end
          23'h7ffffb: begin
            if (M_posx_q == 4'hf && M_posy_q == 1'h0) begin
              ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
              M_pos_d = ball;
              M_counter_d = 1'h0;
              M_state_d = LEFTUP_state;
            end else begin
              if (M_posy_q == 4'h0) begin
                ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                M_pos_d = ball;
                M_counter_d = 1'h0;
                M_state_d = RIGHTUP_state;
              end else begin
                if (M_posx_q == 4'hf) begin
                  ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                  M_pos_d = ball;
                  M_counter_d = 1'h0;
                  M_state_d = LEFTDOWN_state;
                end else begin
                  ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                  M_pos_d = ball;
                  M_counter_d = 1'h0;
                  M_state_d = RIGHTDOWN_state;
                end
              end
            end
          end
        endcase
      end
      LEFTDOWN_state: begin
        if (playing == 2'h0) begin
          M_state_d = GAMESTART_state;
        end
        M_counter_d = M_counter_q + 1'h1;
        
        case (M_counter_q)
          1'h1: begin
            if (M_posy_q == 4'h1) begin
              M_myalu_a = M_posx_q;
              M_myalu_b = 16'h0000;
              M_myalu_alufn = 6'h00;
              aluout = M_myalu_out[0+3-:4];
              if (pright == aluout) begin
                ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                M_pos_d = ball;
                M_counter_d = 1'h0;
                M_state_d = RIGHTUP_state;
              end else begin
                if (pcenter[0+3-:4] == aluout || pcenter[4+3-:4] == aluout || pcenter[8+3-:4] == aluout || pcenter[12+3-:4] == aluout) begin
                  ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                  M_pos_d = ball;
                  M_counter_d = 1'h0;
                  M_state_d = LEFTUP_state;
                end else begin
                  M_counter_d = 1'h0;
                  M_end_d = 1'h1;
                  M_state_d = GAMESTART_state;
                end
              end
            end
          end
          23'h7ffff9: begin
            if (M_posx_q != 4'h0) begin
              M_myalu_a = M_posx_q;
              M_myalu_b = 16'h0001;
              M_myalu_alufn = 6'h01;
              ballx = M_myalu_out[0+3-:4];
              M_posx_d = ballx;
            end
          end
          23'h7ffff8: begin
            if (M_posy_q != 4'h1) begin
              M_myalu_a = M_posy_q;
              M_myalu_b = 16'h0001;
              M_myalu_alufn = 6'h01;
              bally = M_myalu_out[0+3-:4];
              M_posy_d = bally;
            end
          end
          23'h7ffffb: begin
            if (M_posx_q == 4'hf && M_posy_q == 4'h0) begin
              ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
              M_pos_d = ball;
              M_counter_d = 1'h0;
              M_state_d = RIGHTUP_state;
            end else begin
              if (M_posy_q == 4'h0) begin
                ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                M_pos_d = ball;
                M_counter_d = 1'h0;
                M_state_d = LEFTUP_state;
              end else begin
                if (M_posx_q == 4'h0) begin
                  ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                  M_pos_d = ball;
                  M_counter_d = 1'h0;
                  M_state_d = RIGHTDOWN_state;
                end else begin
                  ball = array[(M_posy_q)*128+(M_posx_q)*8+7-:8];
                  M_pos_d = ball;
                  M_counter_d = 1'h0;
                  M_state_d = LEFTDOWN_state;
                end
              end
            end
          end
        endcase
      end
    endcase
    endgame = M_end_q;
    ballpos = ball;
    ballposy = bally;
    ballposx = ballx;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_tempcounter_q <= 1'h0;
      M_pos_q <= 1'h0;
      M_posx_q <= 1'h0;
      M_posy_q <= 1'h0;
      M_end_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_tempcounter_q <= M_tempcounter_d;
      M_pos_q <= M_pos_d;
      M_posx_q <= M_posx_d;
      M_posy_q <= M_posy_d;
      M_end_q <= M_end_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
