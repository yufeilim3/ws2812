/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module brickgen_5 (
    input clk,
    input rst,
    output reg [127:0] brickpos,
    input [7:0] ballpos,
    input [7:0] secondballpos,
    input [1:0] playing,
    output reg endgame
  );
  
  
  
  reg [127:0] bricks;
  
  reg [2047:0] array;
  
  reg [19:0] M_counter_d, M_counter_q = 1'h0;
  reg [4:0] M_bone_d, M_bone_q = 1'h0;
  reg [3:0] M_btwo_d, M_btwo_q = 1'h0;
  reg [3:0] M_bthree_d, M_bthree_q = 1'h0;
  reg [3:0] M_bfour_d, M_bfour_q = 1'h0;
  reg [3:0] M_bfive_d, M_bfive_q = 1'h0;
  reg [3:0] M_bsix_d, M_bsix_q = 1'h0;
  reg [3:0] M_bseven_d, M_bseven_q = 1'h0;
  reg [3:0] M_beight_d, M_beight_q = 1'h0;
  reg [3:0] M_bnine_d, M_bnine_q = 1'h0;
  reg [3:0] M_bten_d, M_bten_q = 1'h0;
  reg [3:0] M_beleven_d, M_beleven_q = 1'h0;
  reg [3:0] M_btwelve_d, M_btwelve_q = 1'h0;
  reg [3:0] M_bthirteen_d, M_bthirteen_q = 1'h0;
  reg [3:0] M_bfourteen_d, M_bfourteen_q = 1'h0;
  reg [3:0] M_bfifthteen_d, M_bfifthteen_q = 1'h0;
  reg [3:0] M_bsixteen_d, M_bsixteen_q = 1'h0;
  reg [3:0] M_byone_d, M_byone_q = 1'h0;
  reg [3:0] M_bytwo_d, M_bytwo_q = 1'h0;
  reg [3:0] M_bythree_d, M_bythree_q = 1'h0;
  reg [3:0] M_byfour_d, M_byfour_q = 1'h0;
  reg [3:0] M_byfive_d, M_byfive_q = 1'h0;
  reg [3:0] M_bysix_d, M_bysix_q = 1'h0;
  reg [3:0] M_byseven_d, M_byseven_q = 1'h0;
  reg [3:0] M_byeight_d, M_byeight_q = 1'h0;
  reg [3:0] M_bynine_d, M_bynine_q = 1'h0;
  reg [3:0] M_byten_d, M_byten_q = 1'h0;
  reg [3:0] M_byeleven_d, M_byeleven_q = 1'h0;
  reg [3:0] M_bytwelve_d, M_bytwelve_q = 1'h0;
  reg [3:0] M_bythirteen_d, M_bythirteen_q = 1'h0;
  reg [3:0] M_byfourteen_d, M_byfourteen_q = 1'h0;
  reg [3:0] M_byfifthteen_d, M_byfifthteen_q = 1'h0;
  reg [3:0] M_bysixteen_d, M_bysixteen_q = 1'h0;
  reg M_end_d, M_end_q = 1'h0;
  localparam GAMESTART_state = 1'd0;
  localparam MINUSBRICK_state = 1'd1;
  
  reg M_state_d, M_state_q = GAMESTART_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_bfourteen_d = M_bfourteen_q;
    M_bthirteen_d = M_bthirteen_q;
    M_byfour_d = M_byfour_q;
    M_bthree_d = M_bthree_q;
    M_byseven_d = M_byseven_q;
    M_bfifthteen_d = M_bfifthteen_q;
    M_bythirteen_d = M_bythirteen_q;
    M_bsix_d = M_bsix_q;
    M_byten_d = M_byten_q;
    M_btwo_d = M_btwo_q;
    M_btwelve_d = M_btwelve_q;
    M_bysixteen_d = M_bysixteen_q;
    M_bone_d = M_bone_q;
    M_bytwo_d = M_bytwo_q;
    M_byfifthteen_d = M_byfifthteen_q;
    M_bnine_d = M_bnine_q;
    M_end_d = M_end_q;
    M_bsixteen_d = M_bsixteen_q;
    M_beight_d = M_beight_q;
    M_beleven_d = M_beleven_q;
    M_bseven_d = M_bseven_q;
    M_bynine_d = M_bynine_q;
    M_counter_d = M_counter_q;
    M_bytwelve_d = M_bytwelve_q;
    M_byfourteen_d = M_byfourteen_q;
    M_bten_d = M_bten_q;
    M_bysix_d = M_bysix_q;
    M_byeight_d = M_byeight_q;
    M_bythree_d = M_bythree_q;
    M_bfive_d = M_bfive_q;
    M_byone_d = M_byone_q;
    M_bfour_d = M_bfour_q;
    M_byeleven_d = M_byeleven_q;
    M_byfive_d = M_byfive_q;
    
    endgame = M_end_q;
    array[0+127-:128] = 128'h0f0e0d0c0b0a09080706050403020100;
    array[128+127-:128] = 128'h101112131415161718191a1b1c1d1e1f;
    array[256+127-:128] = 128'h2f2e2d2c2b2a29282726252423222120;
    array[384+127-:128] = 128'h303132333435363738393a3b3c3d3e3f;
    array[512+127-:128] = 128'h4f4e4d4c4b4a49484746454443424140;
    array[640+127-:128] = 128'h505152535455565758595a5b5c5d5e5f;
    array[768+127-:128] = 128'h6f6e6d6c6b6a69686766656463626160;
    array[896+127-:128] = 128'h707172737475767778797a7b7c7d7e7f;
    array[1024+127-:128] = 128'h8f8e8d8c8b8a89888786858483828180;
    array[1152+127-:128] = 128'h909192939495969798999a9b9c9d9e9f;
    array[1280+127-:128] = 128'hafaeadacabaaa9a8a7a6a5a4a3a2a1a0;
    array[1408+127-:128] = 128'hb0b1b2b3b4b5b6b7b8b9babbbcbdbebf;
    array[1536+127-:128] = 128'hcfcecdcccbcac9c8c7c6c5c4c3c2c1c0;
    array[1664+127-:128] = 128'hd0d1d2d3d4d5d6d7d8d9dadbdcdddedf;
    array[1792+127-:128] = 128'hefeeedecebeae9e8e7e6e5e4e3e2e1e0;
    array[1920+127-:128] = 128'hf0f1f2f3f4f5f6f7f8f9fafbfcfdfeff;
    bricks[0+7-:8] = array[(M_byone_q)*128+(M_bone_q)*8+7-:8];
    bricks[8+7-:8] = array[(M_bytwo_q)*128+(M_btwo_q)*8+7-:8];
    bricks[16+7-:8] = array[(M_bythree_q)*128+(M_bthree_q)*8+7-:8];
    bricks[24+7-:8] = array[(M_byfour_q)*128+(M_bfour_q)*8+7-:8];
    bricks[32+7-:8] = array[(M_byfive_q)*128+(M_bfive_q)*8+7-:8];
    bricks[40+7-:8] = array[(M_bysix_q)*128+(M_bsix_q)*8+7-:8];
    bricks[48+7-:8] = array[(M_byseven_q)*128+(M_bseven_q)*8+7-:8];
    bricks[56+7-:8] = array[(M_byeight_q)*128+(M_beight_q)*8+7-:8];
    bricks[64+7-:8] = array[(M_bynine_q)*128+(M_bnine_q)*8+7-:8];
    bricks[72+7-:8] = array[(M_byten_q)*128+(M_bten_q)*8+7-:8];
    bricks[80+7-:8] = array[(M_byeleven_q)*128+(M_beleven_q)*8+7-:8];
    bricks[88+7-:8] = array[(M_bytwelve_q)*128+(M_btwelve_q)*8+7-:8];
    bricks[96+7-:8] = array[(M_bythirteen_q)*128+(M_bthirteen_q)*8+7-:8];
    bricks[104+7-:8] = array[(M_byfourteen_q)*128+(M_bfourteen_q)*8+7-:8];
    bricks[112+7-:8] = array[(M_byfifthteen_q)*128+(M_bfifthteen_q)*8+7-:8];
    bricks[120+7-:8] = array[(M_bysixteen_q)*128+(M_bsixteen_q)*8+7-:8];
    
    case (M_state_q)
      GAMESTART_state: begin
        M_end_d = 1'h0;
        M_counter_d = M_counter_q + 1'h1;
        bricks[0+7-:8] = array[(M_byone_q)*128+(M_bone_q)*8+7-:8];
        bricks[8+7-:8] = array[(M_bytwo_q)*128+(M_btwo_q)*8+7-:8];
        bricks[16+7-:8] = array[(M_bythree_q)*128+(M_bthree_q)*8+7-:8];
        bricks[24+7-:8] = array[(M_byfour_q)*128+(M_bfour_q)*8+7-:8];
        bricks[32+7-:8] = array[(M_byfive_q)*128+(M_bfive_q)*8+7-:8];
        bricks[40+7-:8] = array[(M_bysix_q)*128+(M_bsix_q)*8+7-:8];
        bricks[48+7-:8] = array[(M_byseven_q)*128+(M_bseven_q)*8+7-:8];
        bricks[56+7-:8] = array[(M_byeight_q)*128+(M_beight_q)*8+7-:8];
        bricks[64+7-:8] = array[(M_bynine_q)*128+(M_bnine_q)*8+7-:8];
        bricks[72+7-:8] = array[(M_byten_q)*128+(M_bten_q)*8+7-:8];
        bricks[80+7-:8] = array[(M_byeleven_q)*128+(M_beleven_q)*8+7-:8];
        bricks[88+7-:8] = array[(M_bytwelve_q)*128+(M_btwelve_q)*8+7-:8];
        bricks[96+7-:8] = array[(M_bythirteen_q)*128+(M_bthirteen_q)*8+7-:8];
        bricks[104+7-:8] = array[(M_byfourteen_q)*128+(M_bfourteen_q)*8+7-:8];
        bricks[112+7-:8] = array[(M_byfifthteen_q)*128+(M_bfifthteen_q)*8+7-:8];
        bricks[120+7-:8] = array[(M_bysixteen_q)*128+(M_bsixteen_q)*8+7-:8];
        M_bone_d = 1'h0;
        M_btwo_d = 3'h4;
        M_bthree_d = 4'ha;
        M_bfour_d = 4'hf;
        M_bfive_d = 4'hd;
        M_bsix_d = 4'hb;
        M_bseven_d = 4'h9;
        M_beight_d = 2'h3;
        M_bnine_d = 1'h1;
        M_bten_d = 4'he;
        M_beleven_d = 3'h4;
        M_btwelve_d = 4'hc;
        M_bthirteen_d = 4'h8;
        M_bfourteen_d = 2'h2;
        M_bfifthteen_d = 4'ha;
        M_bsixteen_d = 3'h6;
        M_byone_d = 4'hf;
        M_bytwo_d = 4'hf;
        M_bythree_d = 4'hf;
        M_byfour_d = 4'he;
        M_byfive_d = 4'he;
        M_bysix_d = 4'he;
        M_byseven_d = 4'he;
        M_byeight_d = 4'he;
        M_bynine_d = 4'he;
        M_byten_d = 4'hd;
        M_byeleven_d = 4'hd;
        M_bytwelve_d = 4'hd;
        M_bythirteen_d = 4'hd;
        M_byfourteen_d = 4'hd;
        M_byfifthteen_d = 4'hd;
        M_bysixteen_d = 4'hd;
        if (M_counter_q[19+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_state_d = MINUSBRICK_state;
        end
      end
      MINUSBRICK_state: begin
        M_counter_d = M_counter_q + 1'h1;
        if (M_counter_q[19+0-:1] == 1'h1) begin
          if (bricks[0+7-:8] == ballpos || bricks[0+7-:8] == secondballpos) begin
            M_byone_d = 8'h00;
            M_bone_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[8+7-:8] == ballpos || bricks[8+7-:8] == secondballpos) begin
            M_bytwo_d = 8'h00;
            M_btwo_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[16+7-:8] == ballpos || bricks[16+7-:8] == secondballpos) begin
            M_bythree_d = 8'h00;
            M_bthree_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[24+7-:8] == ballpos || bricks[24+7-:8] == secondballpos) begin
            M_byfour_d = 8'h00;
            M_bfour_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[32+7-:8] == ballpos || bricks[32+7-:8] == secondballpos) begin
            M_byfive_d = 8'h00;
            M_bfive_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[40+7-:8] == ballpos || bricks[40+7-:8] == secondballpos) begin
            M_bysix_d = 8'h00;
            M_bsix_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[48+7-:8] == ballpos || bricks[48+7-:8] == secondballpos) begin
            M_byseven_d = 8'h00;
            M_bseven_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[56+7-:8] == ballpos || bricks[56+7-:8] == secondballpos) begin
            M_byeight_d = 8'h00;
            M_beight_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[64+7-:8] == ballpos || bricks[64+7-:8] == secondballpos) begin
            M_bynine_d = 8'h00;
            M_bnine_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[72+7-:8] == ballpos || bricks[72+7-:8] == secondballpos) begin
            M_byten_d = 8'h00;
            M_bten_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[80+7-:8] == ballpos || bricks[80+7-:8] == secondballpos) begin
            M_byeleven_d = 8'h00;
            M_beleven_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[88+7-:8] == ballpos || bricks[88+7-:8] == secondballpos) begin
            M_bytwelve_d = 8'h00;
            M_btwelve_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[96+7-:8] == ballpos || bricks[96+7-:8] == secondballpos) begin
            M_bythirteen_d = 8'h00;
            M_bthirteen_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[104+7-:8] == ballpos || bricks[104+7-:8] == secondballpos) begin
            M_byfourteen_d = 8'h00;
            M_bfourteen_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[112+7-:8] == ballpos || bricks[112+7-:8] == secondballpos) begin
            M_byfifthteen_d = 8'h00;
            M_bfifthteen_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks[120+7-:8] == ballpos || bricks[120+7-:8] == secondballpos) begin
            M_bysixteen_d = 8'h00;
            M_bsixteen_d = 8'h0f;
            M_counter_d = 1'h0;
            M_state_d = MINUSBRICK_state;
          end
          if (bricks == 128'h0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f) begin
            M_counter_d = 1'h0;
            M_end_d = 1'h1;
          end
          if (playing == 2'h0) begin
            M_counter_d = 1'h0;
            M_end_d = 1'h0;
            M_state_d = GAMESTART_state;
          end
          M_counter_d = 1'h0;
        end
      end
    endcase
    brickpos = bricks;
    endgame = M_end_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_bone_q <= 1'h0;
      M_btwo_q <= 1'h0;
      M_bthree_q <= 1'h0;
      M_bfour_q <= 1'h0;
      M_bfive_q <= 1'h0;
      M_bsix_q <= 1'h0;
      M_bseven_q <= 1'h0;
      M_beight_q <= 1'h0;
      M_bnine_q <= 1'h0;
      M_bten_q <= 1'h0;
      M_beleven_q <= 1'h0;
      M_btwelve_q <= 1'h0;
      M_bthirteen_q <= 1'h0;
      M_bfourteen_q <= 1'h0;
      M_bfifthteen_q <= 1'h0;
      M_bsixteen_q <= 1'h0;
      M_byone_q <= 1'h0;
      M_bytwo_q <= 1'h0;
      M_bythree_q <= 1'h0;
      M_byfour_q <= 1'h0;
      M_byfive_q <= 1'h0;
      M_bysix_q <= 1'h0;
      M_byseven_q <= 1'h0;
      M_byeight_q <= 1'h0;
      M_bynine_q <= 1'h0;
      M_byten_q <= 1'h0;
      M_byeleven_q <= 1'h0;
      M_bytwelve_q <= 1'h0;
      M_bythirteen_q <= 1'h0;
      M_byfourteen_q <= 1'h0;
      M_byfifthteen_q <= 1'h0;
      M_bysixteen_q <= 1'h0;
      M_end_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_bone_q <= M_bone_d;
      M_btwo_q <= M_btwo_d;
      M_bthree_q <= M_bthree_d;
      M_bfour_q <= M_bfour_d;
      M_bfive_q <= M_bfive_d;
      M_bsix_q <= M_bsix_d;
      M_bseven_q <= M_bseven_d;
      M_beight_q <= M_beight_d;
      M_bnine_q <= M_bnine_d;
      M_bten_q <= M_bten_d;
      M_beleven_q <= M_beleven_d;
      M_btwelve_q <= M_btwelve_d;
      M_bthirteen_q <= M_bthirteen_d;
      M_bfourteen_q <= M_bfourteen_d;
      M_bfifthteen_q <= M_bfifthteen_d;
      M_bsixteen_q <= M_bsixteen_d;
      M_byone_q <= M_byone_d;
      M_bytwo_q <= M_bytwo_d;
      M_bythree_q <= M_bythree_d;
      M_byfour_q <= M_byfour_d;
      M_byfive_q <= M_byfive_d;
      M_bysix_q <= M_bysix_d;
      M_byseven_q <= M_byseven_d;
      M_byeight_q <= M_byeight_d;
      M_bynine_q <= M_bynine_d;
      M_byten_q <= M_byten_d;
      M_byeleven_q <= M_byeleven_d;
      M_bytwelve_q <= M_bytwelve_d;
      M_bythirteen_q <= M_bythirteen_d;
      M_byfourteen_q <= M_byfourteen_d;
      M_byfifthteen_q <= M_byfifthteen_d;
      M_bysixteen_q <= M_bysixteen_d;
      M_end_q <= M_end_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
