/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu16bit_17 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg z,
    output reg v,
    output reg n,
    output reg [15:0] out
  );
  
  
  
  wire [16-1:0] M_myadder_s;
  wire [1-1:0] M_myadder_z;
  wire [1-1:0] M_myadder_v;
  wire [1-1:0] M_myadder_n;
  reg [16-1:0] M_myadder_a;
  reg [16-1:0] M_myadder_b;
  reg [2-1:0] M_myadder_alufn;
  adder16bit_24 myadder (
    .a(M_myadder_a),
    .b(M_myadder_b),
    .alufn(M_myadder_alufn),
    .s(M_myadder_s),
    .z(M_myadder_z),
    .v(M_myadder_v),
    .n(M_myadder_n)
  );
  
  wire [16-1:0] M_myboole_boole;
  reg [16-1:0] M_myboole_a;
  reg [16-1:0] M_myboole_b;
  reg [4-1:0] M_myboole_alufn;
  boole_25 myboole (
    .a(M_myboole_a),
    .b(M_myboole_b),
    .alufn(M_myboole_alufn),
    .boole(M_myboole_boole)
  );
  
  wire [16-1:0] M_myshifter_shift;
  reg [16-1:0] M_myshifter_a;
  reg [16-1:0] M_myshifter_b;
  reg [2-1:0] M_myshifter_alufn;
  shifter_26 myshifter (
    .a(M_myshifter_a),
    .b(M_myshifter_b),
    .alufn(M_myshifter_alufn),
    .shift(M_myshifter_shift)
  );
  
  wire [16-1:0] M_mycmp_cmp;
  reg [2-1:0] M_mycmp_alufn;
  reg [1-1:0] M_mycmp_z;
  reg [1-1:0] M_mycmp_v;
  reg [1-1:0] M_mycmp_n;
  cmp_27 mycmp (
    .alufn(M_mycmp_alufn),
    .z(M_mycmp_z),
    .v(M_mycmp_v),
    .n(M_mycmp_n),
    .cmp(M_mycmp_cmp)
  );
  
  always @* begin
    M_myadder_a = a;
    M_myadder_b = b;
    M_myadder_alufn = alufn[0+1-:2];
    M_myboole_a = a;
    M_myboole_b = b;
    M_myboole_alufn = alufn[0+3-:4];
    M_myshifter_a = a;
    M_myshifter_b = b;
    M_myshifter_alufn = alufn[0+1-:2];
    M_mycmp_z = M_myadder_z;
    M_mycmp_v = M_myadder_v;
    M_mycmp_n = M_myadder_n;
    M_mycmp_alufn = alufn[1+1-:2];
    
    case (alufn[4+1-:2])
      default: begin
        out = 1'h0;
      end
      2'h0: begin
        out = M_myadder_s;
        z = M_myadder_z;
        v = M_myadder_v;
        n = M_myadder_n;
      end
      2'h1: begin
        out = M_myboole_boole;
      end
      2'h2: begin
        out = M_myshifter_shift;
      end
      2'h3: begin
        out = M_mycmp_cmp;
      end
    endcase
    z = M_myadder_z;
    v = M_myadder_v;
    n = M_myadder_n;
  end
endmodule
