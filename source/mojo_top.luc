module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output dataOut,
    input io_button[5],
    output io_led[3][8]
  ) {
  
  sig rst;                  // reset signal
  
  
  .clk(clk) {
    playercontrol mypc;  // paddle module
    ballcontrol myball;  // ball logic module   
    ws2812b myws;  // led driver
    brickgen mybrick;  // brick generator module
    gamestart mygs;  //gamestart screen generator module
    gameover mygo;  //gameover screen generator module
    dff playing[2];  //dff to keep track of game states, 00=gamestart, 01=playing, 10=gameover, 11=gameover
    fsm state = {GAMESTART, PLAYING, GAMEOVER};  // states of game
    edge_detector edge_detector_left(#RISE(1), #FALL(0));  // edge detectors for buttons
    edge_detector edge_detector_right(#RISE(1), #FALL(0));
    button_conditioner button_cond_left;
    button_conditioner button_cond_right;
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    io_led = 3x{{8h00}};  
    
    // edge detectors for 2 buttons
    button_cond_left.in = io_button[3];  
    button_cond_right.in = io_button[4];
    edge_detector_left.in = button_cond_left.out;
    edge_detector_right.in = button_cond_right.out;
    
    // gamestart module
    mygs.rst = rst;
    
    // gameover module
    mygo.rst = rst;
    
    // brick module
    mybrick.rst = rst;
    mybrick.ballpos = myball.ballpos; 
    mybrick.playing = playing.q;
    
    // paddle module
    mypc.lb = io_button[3];
    mypc.rb = io_button[4];
    mypc.rst = rst;
    
    // ball module
    myball.rst = rst;
    myball.paddlepos = mypc.out;
    myball.playing = playing.q;
    
    // led driver module
    myws.playing = playing.q;
    myws.gameover = mygo.gameover;
    myws.gamestart = mygs.gamestart;
    myws.rst = rst;
    myws.ball = myball.ballpos;
    myws.paddle = mypc.out;
    myws.brick = mybrick.brickpos;
    dataOut = myws.datain;
    
    // debugging purposes
    io_led[0][2:1] = playing.q;
    io_led[0][0] = myball.endgame;
    io_led[1][3:0] = myball.ballposx;
    io_led[2]= mybrick.endgame;
    
    
    case(state.q){
      state.GAMESTART:  // gamestart
        myws.playing = playing.q;
        myws.gamestart = mygs.gamestart;
        dataOut = myws.datain;
        playing.d = 2b00;
        if (edge_detector_left.out==1||edge_detector_right.out==1){  //if left/right button pressed, start game
          playing.d = 2b01;
          state.d = state.PLAYING;
        }
        
      state.PLAYING:  // playing state
        playing.d = 2b01;
        myws.playing=playing.q;
        myws.ball = myball.ballpos;
        myws.paddle = mypc.out;
        myws.brick = mybrick.brickpos;
        dataOut = myws.datain;
        if (myball.endgame==1||mybrick.endgame==1){  // if ball not caught by paddle/bricks are all cleared, game ends
          playing.d = 2b10;
          state.d = state.GAMEOVER;
        }
        
      state.GAMEOVER:  // gameover state
        playing.d = 2b10;
        myws.playing = playing.q;
        myws.gameover = mygo.gameover;
        dataOut = myws.datain;
        if (edge_detector_left.out==1||edge_detector_right.out==1){  // if left/right button pressed, go back to gamestart state
          myws.playing = playing.q;
          myws.gamestart = mygs.gamestart;
          dataOut = myws.datain;
          playing.d = 2b00;
          state.d = state.GAMESTART;
        }
    }
  }
}